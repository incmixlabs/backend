CREATE OR REPLACE FUNCTION incmix.getTimestamp() RETURNS TEXT AS $$
    return plv8.execute(`select trunc(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) * 100000)`)[0].trunc;
$$ LANGUAGE plv8 IMMUTABLE STRICT;


CREATE TABLE incmix.globals(
    KEY TEXT PRIMARY KEY NOT NULL UNIQUE,
    VALUE TEXT NOT NULL
);
CREATE OR REPLACE function incmix.setSeed() RETURNS TEXT AS $$
    var seed_value = plv8.execute(`select incmix.getTimestamp()`)[0].gettimestamp
    plv8.elog(INFO,`SEED: ${seed_value}`);
    plv8.execute(`INSERT INTO incmix.globals(KEY, VALUE) VALUES ('SEED', ${seed_value})`);
$$ LANGUAGE plv8 IMMUTABLE STRICT;

insert into incmix.globals (KEY, VALUE) values ('VERSION', '0.0.1');
insert into incmix.globals (KEY, VALUE) values ('TABLES', 'lov_headers,lovs,users,files, file_dir, tags, notes, effective_table');
select incmix.setSeed();

insert into incmix.globals (KEY, VALUE) values ('BASE_SCHEMA', 'incmix');
insert into incmix.globals (KEY, VALUE) values ('BASE_SCHEMA_SHORT', 'im');
CREATE TABLE INCMIX.AUTH
(
    ID     BIGINT PRIMARY KEY  NOT NULL,
    HNDL   INCMIX.VALID_HANDLE NOT NULL UNIQUE,
    PASSWORD TEXT NOT NULL,
    C_BY   BIGINT  NOT NULL REFERENCES INCMIX.AUTH(ID),
    C_AT   TIMESTAMPTZ NOT NULL DEFAULT CLOCK_TIMESTAMP(),
    U_BY   BIGINT REFERENCES INCMIX.AUTH(ID),
    U_AT   TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP(),
    IS_ACT BOOLEAN DEFAULT TRUE, -- IS ACTIVE
    IS_DEL BOOLEAN DEFAULT FALSE,
    LAST_LOGIN TIMESTAMPTZ,
    LAST_ACTIVE TIMESTAMPTZ,
    EMAIL INCMIX.VALID_EMAIL UNIQUE,
    PH INCMIX.VALID_PHONE UNIQUE,
    EMAIL_VERIFIED BOOLEAN DEFAULT FALSE,
    PH_VERIFIED BOOLEAN DEFAULT FALSE,
    OAUTH INCMIX.OAUTH_ENUM
);
ALTER TABLE INCMIX.AUTH
  ADD CONSTRAINT EITHER_PHONE_OR_EMAIL
  CHECK (PH IS NOT NULL OR EMAIL IS NOT NULL);
CREATE TABLE INCMIX.BASE_INSERT_TABLE
(
    C_AT    TIMESTAMPTZ  DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    C_BY    INTEGER  REFERENCES INCMIX.AUTH(ID)
);
CREATE TABLE INCMIX.BASE_UPDATE_TABLE
(
    U_AT    TIMESTAMPTZ  DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    U_BY    INTEGER  REFERENCES INCMIX.AUTH(ID)
);
CREATE TABLE INCMIX.BASE_TABLE
(
  DSCR TEXT
) INHERITS (INCMIX.BASE_INSERT_TABLE, INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.BASE_SCHEMA_TABLE
(
    NAME INCMIX.VALID_HANDLE NOT NULL,
    DATA JSONB
) INHERITS (INCMIX.BASE_TABLE);
CREATE TABLE INCMIX.STATUS (
    IS_ACT BOOLEAN DEFAULT TRUE, -- IS ACTIVE
    IS_DEL BOOLEAN DEFAULT FALSE
)
CREATE TABLE INCMIX.EFFECTIVE_TABLE (
    EFF_FROM TIMESTAMPTZ ,
    EFF_TO TIMESTAMPTZ
);
CREATE TABLE INCMIX.TXNS(
    ID BIGSERIAL PRIMARY KEY NOT NULL,
    DSCR TEXT
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE TABLE INCMIX.MMN (
    ID SMALLSERIAL PRIMARY KEY,
    MMN INCMIX.MMN_TYPE NOT NULL UNIQUE,
    TABLE_NAME TEXT NOT NULL UNIQUE,
    HAS_FORM BOOLEAN,
    HAS_LIST BOOLEAN,
    HAS_GRID BOOLEAN,
    HAS_DASHBOARD BOOLEAN,
    HAS_TIMELINE BOOLEAN,
    HAS_CALENDAR BOOLEAN,
    HAS_KANBAN BOOLEAN,
    HAS_GANTT BOOLEAN,
) INHERITS(INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);

CREATE TABLE INCMIX.LOV_HEADERS
(
    ID INT PRIMARY KEY NOT NULL,
    LABEL TEXT,
    MULTI BOOLEAN DEFAULT FALSE,
    CREATE_NEW BOOLEAN DEFAULT FALSE,
    UNIQUE (NAME)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE);
CREATE TABLE INCMIX.LOVS
(
    ID INT PRIMARY KEY NOT NULL,
    LH_ID BIGINT REFERENCES INCMIX.LOV_HEADERS(ID) NOT NULL,
    VALUE TEXT,
    UNIQUE (LH_ID, NAME),
    LABEL TEXT,
    UNIQUE (LH_ID, VALUE)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE);

CREATE TABLE INCMIX.COL_DEFS
(
    ID    BIGSERIAL PRIMARY KEY,
    -- if associated with table.. they can be w/o MMN
    -- such as common columns such as status
    -- or to override the default MMN
--    MMN_ID INTEGER REFERENCES INCMIX.MMN(ID),
--    POS   SMALLINT,
    TYP   INCMIX.COL_DEF_ENUM NOT NULL DEFAULT 'TEXT',
    NAME INCMIX.VALID_COL_NAME NOT NULL,
    DSCR TEXT,
    VALIDATION JSON,
    FORMAT JSON,
    DEFLT TEXT,
    NULLABLE BOOLEAN,
    READONLY BOOLEAN,
    -- if LOV
    LOVH_ID INTEGER REFERENCES INCMIX.LOV_HEADERS(ID),
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE);

CREATE TABLE INCMIX.COLS(
    ID BIGSERIAL PRIMARY KEY NOT NULL,
    MMN  INCMIX.MMN_TYPE REFERENCES INCMIX.MMN(MMN),
    NAME INCMIX.VALID_COL_NAME NOT NULL,
    COL_NO SMALLINT NOT NULL,
    COL_ID BIGINT REFERENCES INCMIX.COL_DEFS(ID),
    UNIQUE (MMN_ID, NAME),
    UNIQUE (MMN_ID, COL_NO),
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.ROWS
(
    ID BIGINT PRIMARY KEY,
    ROW_NO SMALLINT NOT NULL,
    MMN_ID INCMIX.MMN_TYPE REFERENCES INCMIX.MMN(MMN),
    UNIQUE (MMN_ID, ROW_NO, TXN_ID),
    TXN_ID BIGINT REFERENCES INCMIX.TXNS(ID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE);
CREATE INDEX INCMIX.ROW_TXN_IDX ON INCMIX.ROWS(TXN_ID);

CREATE TABLE INCMIX.CELLS (
    ID BIGINT PRIMARY KEY NOT NULL,
    COL_NO BIGINT NOT NULL REFERENCES INCMIX.COLS(ID),
    ROW_ID BIGINT NOT NULL REFERENCES INCMIX.ROWS(ID),
    VALUE TEXT,
    DATA JSONB,
    PRIMARY KEY (ROW_ID, COL_NO)
) INHERITS (INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.AUDITS(
    ID BIGINT PRIMARY KEY NOT NULL,
    TXN_ID BIGINT REFERENCES INCMIX.TXNS(ID),
    ROW_ID BIGINT REFERENCES INCMIX.ROWS(ID),
    MMN INCMIX.MMN_TYPE NOT NULL,
    UPD_TYPE INCMIX.UPDATE_TYPE,
    UNIQUE (TXN_ID, MMN, ROW_ID)
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE INDEX INCMIX.AUDITS_MMN_ROW_ID_IDX ON INCMIX.AUDITS (MMN, ROW_ID);
CREATE INDEX INCMIX.AUDITS_MMN_UPD_TYPE_IDX ON INCMIX.AUDITS (MMN, UPD_TYPE);

CREATE TABLE INCMIX.AUDITS_CELL(
    ID BIGINT REFERENCES INCMIX.AUDITS(ID),
    CELL_ID BIGINT NOT NULL REFERENCES INCMIX.CELLS(ID),
    VALUE TEXT
)INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE INDEX INCMIX.AUDITS_CELL_ID_IDX ON INCMIX.AUDITS_CELL(CELL_ID);

CREATE TABLE INCMIX.FILE_DIRS
(
    ID BIGINT PRIMARY KEY,
    NAME TEXT NOT NULL,
    FILE_PATH TEXT NOT NULL,
    CMPRESS boolean DEFAULT FALSE,
    ICED boolean DEFAULT FALSE,
    PID BIGINT REFERENCES INCMIX.FILE_DIRS(ID)
) INHERITS (INCMIX.BASE_TABLE);
CREATE TABLE INCMIX.FILES
(
    ID BIGINT PRIMARY KEY,
    FDIR_ID BIGINT REFERENCES INCMIX.FILE_DIRS(ID),
    SIZE INT, -- multiplied by 1000
    UNIT INCMIX.FILE_UNIT,
    FTYPE INCMIX.FILE_TYPE,
    URL INCMIX.VALID_URL NOT NULL UNIQUE
) INHERITS ( INCMIX.FILE_DIRS);

CREATE TABLE INCMIX.USERS
(
    ID BIGINT PRIMARY KEY REFERENCES INCMIX.AUTH(ID),
    NAME   TEXT,
    FNAME TEXT,
    LNAME TEXT,
    AVATAR INCMIX.VALID_URL REFERENCES INCMIX.FILES(FILE_URL),
) EXTENDS (INCMIX.BASE_TABLE, INCMIX.STATUS);

INSERT INTO INCMIX.USERS (ID, HNDL, NAME,  FNAME, LNAME, EMAIL, EMAIL_VERIFIED, IS_ACT, C_BY) VALUES (1, 'incmix', 'Incmix', 'Inc', 'Mix', 'uincmix@gmail.com',  true, true, 1);
CREATE TABLE INCMIX.ACTIVE_SESSIONS (
    ID BIGSERIAL PRIMARY KEY,
    UID BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    IP TEXT,
    USER_AGENT TEXT,
    LOCATION GEOGRAPHY,
    LOGGED_IN TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    EXPIRES TIMESTAMPTZ  TIMESTAMPTZ NOT NULL DEFAULT (NOW() + interval '1 month')
) INHERITS (INCMIX.BASE_INSERT_TABLE);

CREATE TABLE INCMIX.SESSIONS (
    ID BIGSERIAL PRIMARY KEY,
    UID BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    LOGOUT_TYPE INCMIX.SESSION_LOGOUT_TYPE,
    LOGGED_OUT TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP() NOT NULL
) INHERITS (INCMIX.ACTIVE_SESSIONS);

CREATE TABLE INCMIX.RELATIONS (
    UUID1 TEXT NOT NULL,
    UUID2 TEXT NOT NULL,
    RELATION INCMIX.RELATION_TYPE NOT NULL,
    PRIMARY KEY (UUID1, UUID2),
    UNIQUE (UUID2, UUID1)
) INHERITS (INCMIX.BASE_INSERT_TABLE, INCMIX.EFFECTIVE_TABLE);


CREATE TABLE INCMIX.PROJECTS (
    ID BIGINT PRIMARY KEY,
    STATUS INCMIX.PROJECT_STATUS_TYPE
    PROJECT_TYPE INT REFERENCES INCMIX.LOVS(ID),
    SPRINT_CYCLE SMALLINT DEFAULT 2
    STORY_POINTS INT[],
    DUE_DATE INCMIX.START_END_DATE,
    ACTUAL_START_END_DATE INCMIX.START_END_DATE,
    HOURS INCMIX.FINANCIALS,
    COST INCMIX.FINANCIALS,
    PARENT_PROJECT BIGINT REFERENCES INCMIX.PROJECTS(ID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);
CREATE INDEX PROJECT_STATUS_IDX ON INCMIX.PROJECTS(STATUS);
CREATE UNIQUE INDEX PROJECT_NAME_IDX ON INCMIX.PROJECTS(NAME);

CREATE TABLE INCMIX.TASKS(
    ID BIGINT PRIMARY KEY,
    TASK_STATUS INT REFERENCES INCMIX.LOVS(ID),
    TASK_TYPE INT REFERENCES INCMIX.LOVS(ID),
    TASK_PRIORITY INT REFERENCES INCMIX.LOVS(ID),
    ASSIGNED_TO BIGINT[],
    DUE_START_END_DATE INCMIX.START_END_DATE,
    ACTUAL_START_END_DATE INCMIX.START_END_DATE,
    STORY_POINTS INT,
    HOURS INCMIX.FINANCIALS,
    COST INCMIX.FINANCIALS,
    PT_ID BIGINT REFERENCES INCMIX.TASKS(ID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);
CREATE INDEX TASK_HANDLE_IDX ON INCMIX.TASKS(NAME);


CREATE TABLE INCMIX.NOTES (
    ID BIGINT NOT NULL UNIQUE PRIMARY KEY,
    IS_TEMPLATE BOOLEAN DEFAULT FALSE,
    TITLE TEXT NOT NULL,
    NOTES TEXT
) INHERITS (INCMIX.BASE_TABLE, INCMIX.EFFECTIVE_TABLE);
CREATE INDEX INCMIX.NOTES_TITLE_IDX ON INCMIX.NOTES(TITLE);

CREATE TABLE INCMIX.AGREEMENTS (
    ID INT PRIMARY KEY,
    INCMIX.AGREE_TYPE,
    AGREE_TEXT TEXT,
    INFORMATIONAL boolean, -- show as banner
    AGREE_URL VALID_URL,
    EXP_DATE TIMESTAMPTZ,
    DUE_DATE TIMESTAMPTZ,
    REPLACEMENT_AGREE_ID INT REFERENCES INCMIX.AGREEMENTS(ID)
) INHERITS (INCMIX.EFFECTIVE_TABLE);

CREATE TABLE INCMIX.BASE_PERMISSION_TABLE
(
    PUBLIC BOOLEAN DEFAULT FALSE,
    ALLOW_DISALLOW INCMIX.TINYINT NOT NULL DEFAULT 0,
    -- 1 ALLOw_INVITE_BY_SHARED_URL
    -- 2 ALLOW_DISCOVERY
    -- 4 ALLOW_ONLY_WHITELISTED
    -- 8 DISALLOW_ONLY_BLACKLISTED
    -- [{role: role , users: []}]
    INVITED INCMIX.USER_ROLE[],
    USERS  INCMIX.USER_ROLE[],
    EXCLUDED INCMIX.VALID_EMAIL_OR_URL[],
    INCLUDED INCMIX.VALID_EMAIL_OR_URL[]
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.ORGS (
    ID INT PRIMARY KEY,
    DOMAIN  INCMIX.VALID_URL,
    favicon INCMIX.FILES REFERENCES INCMIX.FILES(ID),
    ORG_PLAN INCMIX.LOV_TYPE   NOT NULL DEFAULT 0,
    LOGO INCMIX.VALID_URL,
    public BOOLEAN DEFAULT FALSE,
    discoverable BOOLEAN DEFAULT FALSE,
    OWNER BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    CO_OWNERS BIGINT[],
) INHERITS (INCMIX.BASE_PERMISSION_TABLE, INCMIX.EFFECTIVE_TABLE);

CREATE TABLE INCMIX.ASSIGNED_AGREEMENTS (
    ID INT PRIMARY KEY,
    ORG_ID INT REFERENCES INCMIX.ORG(ID),
    AGREE_ID INT NOT NULL REFERENCES INCMIX.AGREEMENTS(ID),
    SIGNED_BY BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    SIGNED_DATE TIMESTAMPTZ,
    UNIQUE (ORG_ID, AGREE_ID)
);
CREATE TABLE INCMIX.TEAMS (
    ID INT PRIMARY KEY,
    NAME INCMIX.VALID_HANDLE NOT NULL UNIQUE,
    ROLE INCMIX.VALID_ROLE NOT NULL
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);

CREATE TABLE INCMIX.TEAM_MEMBERS (
    XUID TEXT NOT NULL,
    TID INT REFERENCES INCMIX.TEAMS(ID) NOT NULL,
    UID BIGINT REFERENCES INCMIX.AUTH(ID) NOT NULL,
    UNIQUE (XUID, TID, UID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);

CREATE TABLE INCMIX.NOTES (
    ID BIGINT PRIMARY KEY,
    XUID TEXT NOT NULL,
    NAME INCMIX.VALID_HANDLE NOT NULL,
    NOTES TEXT,
    UNIQUE (XUID, NAME)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE, INCMIX.EFFECTIVE_TABLE, INCMIX.STATUS);
