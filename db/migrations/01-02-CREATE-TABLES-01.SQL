CREATE OR REPLACE FUNCTION incmix.getTimestamp() RETURNS TEXT AS $$
    return plv8.execute(`select trunc(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) * 100000)`)[0].trunc;
$$ LANGUAGE plv8 IMMUTABLE STRICT;

CREATE TABLE incmix.globals(
    KEY TEXT PRIMARY KEY NOT NULL UNIQUE,
    VALUE TEXT NOT NULL
);
CREATE OR REPLACE function incmix.setSeed() RETURNS TEXT AS $$
    var seed_value = plv8.execute(`select incmix.getTimestamp()`)[0].gettimestamp
    plv8.elog(INFO,`SEED: ${seed_value}`);
    plv8.execute(`INSERT INTO incmix.globals(KEY, VALUE) VALUES ('SEED', ${seed_value})`);
    return seed_value;
$$ LANGUAGE plv8 IMMUTABLE STRICT;

insert into incmix.globals (KEY, VALUE) values ('VERSION', '0.0.1');
insert into incmix.globals (KEY, VALUE) values ('TABLES', 'lov_headers,lovs,users,files, file_dir, tags, notes, effective_table');
select incmix.setSeed();

insert into incmix.globals (KEY, VALUE) values ('BASE_SCHEMA', 'incmix');
insert into incmix.globals (KEY, VALUE) values ('BASE_SCHEMA_SHORT', 'im');
CREATE TABLE INCMIX.AUTH
(
    ID     BIGINT PRIMARY KEY  NOT NULL,
    HNDL   INCMIX.VALID_HANDLE NOT NULL UNIQUE,
    PASSWORD TEXT NOT NULL,
    C_BY   BIGINT  NOT NULL REFERENCES INCMIX.AUTH(ID),
    C_AT   TIMESTAMPTZ NOT NULL DEFAULT CLOCK_TIMESTAMP(),
    U_BY   BIGINT REFERENCES INCMIX.AUTH(ID),
    U_AT   TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP(),
    STATUS INCMIX.STATUS,
    LAST_LOGIN TIMESTAMPTZ,
    LAST_ACTIVE TIMESTAMPTZ,
    EMAIL INCMIX.VALID_EMAIL UNIQUE,
    PH INCMIX.VALID_PHONE UNIQUE,
    EMAIL_VERIFIED BOOLEAN DEFAULT FALSE,
    PH_VERIFIED BOOLEAN DEFAULT FALSE,
    OAUTH INCMIX.OAUTH_ENUM
);
ALTER TABLE INCMIX.AUTH
  ADD CONSTRAINT EITHER_PHONE_OR_EMAIL
  CHECK (PH IS NOT NULL OR EMAIL IS NOT NULL);
CREATE TABLE INCMIX.BASE_INSERT_TABLE
(
    C_AT    TIMESTAMPTZ  DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    C_BY    INTEGER  REFERENCES INCMIX.AUTH(ID)
);
CREATE TABLE INCMIX.BASE_UPDATE_TABLE
(
    U_AT    TIMESTAMPTZ  DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    U_BY    INTEGER  REFERENCES INCMIX.AUTH(ID)
);
CREATE TABLE INCMIX.BASE_TABLE
(
  DSCR TEXT
) INHERITS (INCMIX.BASE_INSERT_TABLE, INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.BASE_SCHEMA_TABLE
(
    NAME INCMIX.VALID_HANDLE NOT NULL,
    DATA JSONB
) INHERITS (INCMIX.BASE_TABLE);
CREATE TABLE INCMIX.EFFECTIVE_TABLE (
    EFF_FROM TIMESTAMPTZ ,
    EFF_TO TIMESTAMPTZ
);
CREATE TABLE INCMIX.TXNS(
    ID BIGINT PRIMARY KEY NOT NULL,
    DATA JSONB
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE TABLE INCMIX.MMN (
    ID SMALLINT PRIMARY KEY,
    MMN INCMIX.MMN_TYPE NOT NULL UNIQUE,
    TABLE_NAME TEXT NOT NULL UNIQUE,
    HAS_FORM BOOLEAN,
    HAS_LIST BOOLEAN,
    HAS_GRID BOOLEAN,
    HAS_DASHBOARD BOOLEAN,
    HAS_TIMELINE BOOLEAN,
    HAS_CALENDAR BOOLEAN,
    HAS_KANBAN BOOLEAN,
    HAS_GANTT BOOLEAN,
    EFF INCMIX.DATE_RANGE,
    STATUS INCMIX.STATUS
) INHERITS(INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.LOV_HEADERS
(
    ID INT PRIMARY KEY NOT NULL,
    LABEL TEXT NOT NULL,
    MULTI BOOLEAN DEFAULT FALSE,
    CREATE_NEW BOOLEAN DEFAULT FALSE,
    UNIQUE (NAME)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.LOVS
(
    ID INT PRIMARY KEY NOT NULL,
    LH_ID BIGINT REFERENCES INCMIX.LOV_HEADERS(ID) NOT NULL,
    VALUE TEXT,
    UNIQUE (LH_ID, NAME),
    LABEL TEXT,
    SORT_ORDER INT DEFAULT 0,
    UNIQUE (LH_ID, VALUE),
    UNIQUE (LH_ID, LABEL),
    IS_DEFAULT BOOLEAN DEFAULT FALSE,
    UNIQUE (LH_ID, SORT_ORDER)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

ALTER TABLE INCMIX.LOV_HEADERS
  ADD COLUMN DEFAULT_LOV_ID INT REFERENCES INCMIX.LOVS(ID);

CREATE TABLE INCMIX.COL_DEFS
(
    ID    BIGINT PRIMARY KEY,
    -- if associated with table.. they can be w/o MMN
    -- such as common columns such as status
    -- or to override the default MMN
--    MMN_ID INTEGER REFERENCES INCMIX.MMN(ID),
--    POS   SMALLINT,
    DEF INCMIX.CELL_DEF,
    -- if LOV
    LOVH_ID INTEGER REFERENCES INCMIX.LOV_HEADERS(ID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.COL_DEF_AUDITS
(
  ID   BIGINT PRIMARY KEY,
  XID  BIGINT NOT NULL REFERENCES INCMIX.COL_DEFS(ID),
    -- if associated with table.. they can be w/o MMN
    -- such as common columns such as status
    -- or to override the default MMN
--    MMN_ID INTEGER REFERENCES INCMIX.MMN(ID),
--    POS   SMALLINT,
  CHANGE_TYPE INCMIX.UPDATE_TYPE NOT NULL
) INHERITS (INCMIX.COL_DEFS);
CREATE INDEX COL_DEF_AUDITS_XID_IDX ON INCMIX.COL_DEF_AUDITS(XID);
CREATE TABLE INCMIX.COLS(
  ID BIGINT PRIMARY KEY NOT NULL,
  COL_NO SMALLINT NOT NULL,
  COL_ID BIGINT REFERENCES INCMIX.COL_DEFS(ID),
  MMN INCMIX.MMN_TYPE NOT NULL REFERENCES INCMIX.MMN(MMN),
  UNIQUE (MMN, NAME),
  UNIQUE (MMN, COL_NO)
) INHERITS (INCMIX.COL_DEFS);
-- Either COL_ID points to existing COL_DEFS or one off unique column
-- This allows to have a column without definition, such as status
ALTER TABLE INCMIX.COLS
  ADD CONSTRAINT EITHER_COLS_NAME_OR_COL_ID
  CHECK (COL_ID IS NOT NULL OR NAME IS NOT NULL);
CREATE TABLE INCMIX.COL_AUDITS (
  ID BIGINT PRIMARY KEY NOT NULL,
  XID BIGINT NOT NULL REFERENCES INCMIX.COLS(ID),
  UPD_TYPE INCMIX.UPDATE_TYPE NOT NULL
) INHERITS (INCMIX.INCMIX.COLS);
CREATE INDEX COL_AUDITS_XID_IDX ON INCMIX.COL_AUDITS(XID);
CREATE INDEX COLS_AUDITS_MMN_IDX ON INCMIX.COL_AUDITS(MMN);
CREATE TABLE INCMIX.ROWS
(
    ID BIGINT PRIMARY KEY,
    ROW_NO INT NOT NULL,
    MMN INCMIX.MMN_TYPE REFERENCES INCMIX.MMN(MMN),
    UNIQUE (MMN, ROW_NO),
    IS_SUMMARY BOOLEAN,
    DATA JSONB
) INHERITS (INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.CELLS (
  ID BIGINT PRIMARY KEY NOT NULL,
  COL_ID BIGINT REFERENCES INCMIX.COLS(ID),
  ROW_ID BIGINT NOT NULL REFERENCES INCMIX.ROWS(ID),
  LOV_ID INT REFERENCES INCMIX.LOVS(ID),
  VALUE TEXT,
  DATA JSONB,
  UNIQUE (ROW_ID, COL_ID)
) INHERITS (INCMIX.BASE_UPDATE_TABLE);
CREATE INDEX CELLS_ROW_IDX ON INCMIX.CELLS(ROW_ID);
CREATE INDEX CELLS_LOV_IDX ON INCMIX.CELLS(LOV_ID);
CREATE INDEX CELLS_UAT_IDX ON INCMIX.CELLS(U_AT);
CREATE TABLE INCMIX.AUDIT_CELLS(
  ID BIGINT NOT NULL PRIMARY KEY,
  XID BIGINT NOT NULL REFERENCES INCMIX.CELLS(ID),
  VALUE TEXT,
  DATA JSONB
)INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE INDEX AUDIT_CELLS_XIDX ON INCMIX.AUDIT_CELLS(XID);

CREATE TABLE INCMIX.AUDIT_ROWS(
    ID BIGINT PRIMARY KEY NOT NULL,
    XID BIGINT NOT NULL REFERENCES INCMIX.ROWS(ID),
    MMN INCMIX.MMN_TYPE NOT NULL REFERENCES INCMIX.MMN(MMN),
    UPD_TYPE INCMIX.UPDATE_TYPE
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE INDEX AUDITS_MMN_ROW_ID_IDX ON INCMIX.AUDIT_ROWS (MMN, XID);
CREATE INDEX AUDITS_MMN_UPD_TYPE_IDX ON INCMIX.AUDIT_ROWS (MMN, UPD_TYPE);

CREATE TABLE INCMIX.FILE_DIRS
(
    ID BIGINT PRIMARY KEY,
    NAME TEXT NOT NULL,
    FILE_PATH TEXT NOT NULL,
    CMPRESS boolean DEFAULT FALSE,
    ICED boolean DEFAULT FALSE,
    PID BIGINT REFERENCES INCMIX.FILE_DIRS(ID)
) INHERITS (INCMIX.BASE_TABLE);
CREATE TABLE INCMIX.FILES
(
    ID BIGINT PRIMARY KEY,
    SIZE INT, -- multiplied by 1000
    UNIT INCMIX.FILE_UNIT,
    FTYPE INCMIX.FILE_TYPE,
    URL INCMIX.VALID_URL NOT NULL UNIQUE
) INHERITS ( INCMIX.FILE_DIRS);

CREATE TABLE INCMIX.USERS
(
    ID BIGINT PRIMARY KEY REFERENCES INCMIX.AUTH(ID),
    NAME   TEXT,
    FNAME TEXT,
    LNAME TEXT,
    AVATAR INCMIX.VALID_URL REFERENCES INCMIX.FILES(URL),
    STATUS INCMIX.STATUS
) INHERITS (INCMIX.BASE_TABLE);

CREATE TABLE INCMIX.ACTIVE_SESSIONS (
    ID BIGINT PRIMARY KEY,
    UID BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    IP TEXT,
    USER_AGENT TEXT,
    LOC INCMIX.LOCATION,
    LOGGED_IN TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP() NOT NULL,
    EXPIRES TIMESTAMPTZ  NOT NULL DEFAULT (NOW() + interval '1 month')
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE TABLE INCMIX.SESSIONS (
    ID BIGINT PRIMARY KEY,
    UID BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    LOGOUT_TYPE INCMIX.SESSION_LOGOUT_TYPE,
    LOGGED_OUT TIMESTAMPTZ DEFAULT CLOCK_TIMESTAMP() NOT NULL
) INHERITS (INCMIX.ACTIVE_SESSIONS);
CREATE TABLE INCMIX.RELATIONS (
    UUID1 TEXT NOT NULL,
    UUID2 TEXT NOT NULL,
    RELATION INCMIX.RELATION_TYPE NOT NULL,
    PRIMARY KEY (UUID1, UUID2)
) INHERITS (INCMIX.BASE_INSERT_TABLE);
CREATE TABLE INCMIX.RELATION_AUDITS (
    ID BIGINT PRIMARY KEY
) INHERITS (INCMIX.RELATIONS);

CREATE TABLE INCMIX.CLIENTS (
    ID BIGINT PRIMARY KEY,
    LOV_ID INCMIX.LOV_TYPE REFERENCES INCMIX.LOV_HEADERS(ID), -- 1 - mobile, 2 - desktop
    URL INCMIX.VALID_URL,
    ICON INCMIX.VALID_URL REFERENCES INCMIX.FILES(URL),
    EFF INCMIX.DATE_RANGE,
    STATUS INCMIX.STATUS
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.PROJECTS (
    ID BIGINT PRIMARY KEY,
    STATUS INCMIX.PROJECT_STATUS_TYPE,
    PROJECT_TYPE INT REFERENCES INCMIX.LOVS(ID),
    PROGRESS INT DEFAULT 0, -- 0-10000 diCREATE TABLE INCMIX.RELATIONS (
    SPRINT_CYCLE SMALLINT DEFAULT 2,
    STORY_POINTS INT[],
    DUE_START_END_DATE INCMIX.DATE_RANGE,
    ACTUAL_START_END_DATE INCMIX.DATE_RANGE,
    HOURS INCMIX.FINANCIALS,
    COST INCMIX.FINANCIALS,
    PARENT_PROJECT BIGINT REFERENCES INCMIX.PROJECTS(ID),
    EFF INCMIX.DATE_RANGE
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);
CREATE INDEX PROJECT_STATUS_IDX ON INCMIX.PROJECTS(STATUS);
CREATE UNIQUE INDEX PROJECT_NAME_IDX ON INCMIX.PROJECTS(NAME);

CREATE TABLE INCMIX.TASKS(
    ID BIGINT PRIMARY KEY,
    TASK_STATUS INT REFERENCES INCMIX.LOVS(ID),
    TASK_TYPE INT REFERENCES INCMIX.LOVS(ID),
    TASK_PRIORITY INT REFERENCES INCMIX.LOVS(ID),
    ASSIGNED_TO BIGINT[],
    DUE_START_END_DATE INCMIX.DATE_RANGE,
    ACTUAL_START_END_DATE INCMIX.DATE_RANGE,
    STORY_POINTS INT,
    HOURS INCMIX.FINANCIALS,
    COST INCMIX.FINANCIALS,
    PID BIGINT REFERENCES INCMIX.TASKS(ID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);
CREATE INDEX TASK_HANDLE_IDX ON INCMIX.TASKS(NAME);

CREATE TABLE INCMIX.NOTES (
    ID BIGINT NOT NULL UNIQUE PRIMARY KEY,
    IS_TEMPLATE BOOLEAN DEFAULT FALSE,
    TITLE TEXT NOT NULL,
    NOTES TEXT,
    EFF INCMIX.DATE_RANGE,
    STATUS INCMIX.STATUS
) INHERITS (INCMIX.BASE_TABLE);
CREATE INDEX NOTES_TITLE_IDX ON INCMIX.NOTES(TITLE);

CREATE TABLE INCMIX.AGREEMENTS (
    ID INT PRIMARY KEY,
    AGREE_TYPE INCMIX.AGREE_TYPE,
    AGREE_TEXT TEXT,
    INFORMATIONAL boolean, -- show as banner
    AGREE_URL INCMIX.VALID_URL,
    EXP_DATE TIMESTAMPTZ,
    DUE_DATE TIMESTAMPTZ,
    REPLACEMENT_AGREE_ID INT REFERENCES INCMIX.AGREEMENTS(ID),
    EFF_DATE INCMIX.DATE_RANGE
) INHERITS (INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.BASE_PERMISSION_TABLE
(
    PUBLIC BOOLEAN DEFAULT FALSE,
    ALLOW_DISALLOW INCMIX.TINYINT NOT NULL DEFAULT 0,
    -- 1 ALLOw_INVITE_BY_SHARED_URL
    -- 2 ALLOW_DISCOVERY
    -- 4 ALLOW_ONLY_WHITELISTED
    -- 8 DISALLOW_ONLY_BLACKLISTED
    -- [{role: role , users: []}]
    INVITED INCMIX.VALID_ROLE[],
    USERS  INCMIX.VALID_ROLE[],
    EXCLUDED INCMIX.VALID_EMAIL_OR_URL[],
    INCLUDED INCMIX.VALID_EMAIL_OR_URL[]
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);

CREATE TABLE INCMIX.ORGS (
    ID INT PRIMARY KEY,
    DOMAIN  INCMIX.VALID_URL,
    favicon BIGINT REFERENCES INCMIX.FILES(ID),
    ORG_PLAN INCMIX.LOV_TYPE   NOT NULL DEFAULT 0,
    LOGO INCMIX.VALID_URL,
    public BOOLEAN DEFAULT FALSE,
    discoverable BOOLEAN DEFAULT FALSE,
    OWNER BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    CO_OWNERS BIGINT[],
    STATUS INCMIX.STATUS
) INHERITS (INCMIX.BASE_PERMISSION_TABLE, INCMIX.EFFECTIVE_TABLE);

CREATE TABLE INCMIX.ASSIGNED_AGREEMENTS (
    ID INT PRIMARY KEY,
    ORG_ID INT REFERENCES INCMIX.ORGS(ID),
    AGREE_ID INT NOT NULL REFERENCES INCMIX.AGREEMENTS(ID),
    SIGNED_BY BIGINT NOT NULL REFERENCES INCMIX.AUTH(ID),
    SIGNED_DATE TIMESTAMPTZ,
    UNIQUE (ORG_ID, AGREE_ID)
) INHERITS (INCMIX.BASE_UPDATE_TABLE);

CREATE TABLE INCMIX.TEAMS (
    ID BIGINT PRIMARY KEY,
    ROLE INCMIX.VALID_ROLE NOT NULL,
    STATUS INCMIX.STATUS,
    UNIQUE (NAME, ROLE)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);
CREATE TABLE INCMIX.TEAM_AUDITS (
    ID BIGINT PRIMARY KEY,
    XID BIGINT NOT NULL REFERENCES INCMIX.TEAMS(ID),
    UPD_TYPE INCMIX.UPDATE_TYPE NOT NULL
) INHERITS (INCMIX.TEAMS);

CREATE TABLE INCMIX.TEAM_MEMBERS (
    ID BIGINT PRIMARY KEY,
    TID INT REFERENCES INCMIX.TEAMS(ID) NOT NULL,
    UID BIGINT REFERENCES INCMIX.AUTH(ID) NOT NULL,
    UNIQUE (TID, UID)
) INHERITS (INCMIX.BASE_SCHEMA_TABLE);
CREATE TABLE INCMIX.TEAM_MEMBER_AUDITS (
    ID BIGINT PRIMARY KEY,
    XID BIGINT NOT NULL REFERENCES INCMIX.TEAM_MEMBERS(ID),
    UPD_TYPE INCMIX.UPDATE_TYPE NOT NULL
) INHERITS (INCMIX.TEAM_MEMBERS);
