name: 'Docker Build and Push'
description: 'Builds a Docker image from a Dockerfile and pushes it to a Docker registry'

inputs:
  dockerfile:
    description: 'Path to the Dockerfile (relative to repository root)'
    required: true
    default: 'Dockerfile'
  context:
    description: 'Build context path (relative to repository root)'
    required: false
    default: '.'
  image-name:
    description: 'Name of the Docker image (without tag)'
    required: true
  image-tag:
    description: 'Tag for the Docker image'
    required: false
    default: 'latest'
  registry:
    description: 'Docker registry URL'
    required: false
    default: https://registry.incmix.com
  registry-username:
    description: 'Docker registry username (from secrets)'
    required: true
  registry-password:
    description: 'Docker registry password (from secrets)'
    required: true
  push:
    description: 'Whether to push the image to the registry'
    required: false
    default: 'true'
  cache-from:
    description: 'Comma-separated list of images to use as cache sources'
    required: false
  cache-to:
    description: 'Cache destination (e.g., type=registry,ref=image:cache)'
    required: false
  build-args:
    description: 'Comma-separated list of build arguments (key=value)'
    required: false
  labels:
    description: 'Comma-separated list of labels (key=value)'
    required: false
  platforms:
    description: 'Comma-separated list of platforms to build for'
    required: false
    default: 'linux/amd64'

outputs:
  image-digest:
    description: 'Digest of the built image'
    value: ${{ steps.build.outputs.digest }}
  image-id:
    description: 'ID of the built image'
    value: ${{ steps.build.outputs.imageid }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.13.0
        buildkitd-flags: --debug --allow-insecure-entitlement security.insecure

    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ inputs.image-tag }}

    - name: Debug build configuration
      run: |
        echo "=== BUILD CONFIGURATION DEBUG ==="
        echo "Context: ${{ inputs.context }}"
        echo "Dockerfile: ${{ inputs.dockerfile }}"
        echo "Image name: ${{ inputs.image-name }}"
        echo "Registry: ${{ inputs.registry }}"
        echo "Push: ${{ inputs.push }}"
        echo "Cache from: ${{ inputs.cache-from }}"
        echo "Cache to: ${{ inputs.cache-to }}"
        echo "Platforms: ${{ inputs.platforms }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"
        echo "=== END DEBUG ==="
      shell: bash

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        build-args: ${{ inputs.build-args }}
        platforms: ${{ inputs.platforms }}
        provenance: false
        outputs: type=image
        no-cache-filters: true
